
/* Drop Indexes */

DROP INDEX I_QUESTION_POLL_CREATED ON T_ANSWER;
DROP INDEX I_BLOCKED ON T_QUESTION;
DROP INDEX I_REWARD ON T_QUESTION;
DROP INDEX I_STATUS ON T_QUESTION;
DROP INDEX I_RECOMMENDED ON T_QUESTION;
DROP INDEX I_NICKNAME ON T_USER;
DROP INDEX I_EMAIL ON T_USER;
DROP INDEX I_SCORE ON T_USER;
DROP INDEX I_BLOCKED ON T_USER;
DROP INDEX I_CREATEDAT ON T_USER;
DROP INDEX I_LASTLOGIN ON T_USER;



/* Drop Tables */

DROP TABLE T_ANSWER;
DROP TABLE T_USER_VOTING;
DROP TABLE T_QUESTION;
DROP TABLE T_CATEGORY;
DROP TABLE T_SUBLEVEL;
DROP TABLE T_USER;
DROP TABLE T_LEVEL;
DROP TABLE T_REWARD;
DROP TABLE T_ROLE;




/* Create Tables */

CREATE TABLE T_ANSWER
(
	ID BIGINT UNSIGNED NOT NULL AUTO_INCREMENT,
	QUESTION_ID BIGINT UNSIGNED NOT NULL,
	USER_ID BIGINT UNSIGNED,
	CONTENT LONGTEXT,
	-- 0 stands for NORMAL
	-- 1 stands for BEST by the question author
	-- 2 stands for BEST by intenet voting
	LEVEL TINYINT DEFAULT 0 COMMENT '0 stands for NORMAL
1 stands for BEST by the question author
2 stands for BEST by intenet voting',
	CANDIDATE BOOL DEFAULT '0',
	TICKETS INT DEFAULT 0,
	BLOCKED BOOL DEFAULT '0',
	BLOCKEDTILL DATETIME,
	CREATEDAT DATETIME,
	UPDATEDAT DATETIME,
	PRIMARY KEY (ID)
);


CREATE TABLE T_CATEGORY
(
	ID BIGINT UNSIGNED NOT NULL AUTO_INCREMENT,
	PARENT_ID BIGINT UNSIGNED NOT NULL,
	-- Ancestors' id delimited by ,
	ANCESTORS_ID TINYTEXT COMMENT 'Ancestors'' id delimited by ,',
	NAME VARCHAR(60) NOT NULL,
	DESCRIPTION TINYTEXT,
	-- if this is the default level
	-- 1 stands for yes
	-- 0 stands for no
	D BIT COMMENT 'if this is the default level
1 stands for yes
0 stands for no',
	PRIMARY KEY (ID)
);


CREATE TABLE T_LEVEL
(
	ID BIGINT UNSIGNED NOT NULL AUTO_INCREMENT,
	SERIALNAME VARCHAR(30),
	-- if this is the default level
	-- 1 stands for yes
	-- 0 stands for no
	D BIT COMMENT 'if this is the default level
1 stands for yes
0 stands for no',
	DESCRIPTION TINYTEXT,
	PRIMARY KEY (ID)
);


CREATE TABLE T_QUESTION
(
	ID BIGINT UNSIGNED NOT NULL AUTO_INCREMENT,
	CATEGORY_ID BIGINT UNSIGNED,
	USER_ID BIGINT UNSIGNED,
	TITLE VARCHAR(140) NOT NULL,
	CONTENT LONGTEXT,
	SUPPLYMENT TEXT,
	REWARD MEDIUMINT UNSIGNED DEFAULT 0,
	-- 0 represents OPEN
	-- 1 stands for CLOSED
	-- 2 stands for IN POOL
	STATUS TINYINT DEFAULT 0 COMMENT '0 represents OPEN
1 stands for CLOSED
2 stands for IN POOL',
	-- This is used to set the deadline for open status
	DEADLINE DATETIME COMMENT 'This is used to set the deadline for open status',
	RECOMMENDED BOOL DEFAULT '0',
	VIEWEDCOUNT INT UNSIGNED,
	DIGCOUNT MEDIUMINT UNSIGNED,
	BLOCKED BOOL DEFAULT '0',
	BLOCKEDTILL DATETIME,
	CREATEDAT DATETIME,
	UPDATEDAT DATETIME,
	PRIMARY KEY (ID)
);


CREATE TABLE T_REWARD
(
	ID BIGINT UNSIGNED NOT NULL AUTO_INCREMENT,
	ACTION VARCHAR(30) NOT NULL,
	REWARD MEDIUMINT UNSIGNED,
	PRIMARY KEY (ID)
);


CREATE TABLE T_ROLE
(
	ID BIGINT UNSIGNED NOT NULL AUTO_INCREMENT,
	NAME VARCHAR(60) NOT NULL UNIQUE,
	DESCRIPTION TINYTEXT,
	PRIMARY KEY (ID)
);


CREATE TABLE T_SUBLEVEL
(
	ID BIGINT UNSIGNED NOT NULL AUTO_INCREMENT,
	LEVEL_ID BIGINT UNSIGNED NOT NULL,
	NAME VARCHAR(60) NOT NULL,
	MINSCORE MEDIUMINT UNSIGNED,
	MAXSCORE MEDIUMINT UNSIGNED,
	PRIMARY KEY (ID)
);


CREATE TABLE T_USER
(
	ID BIGINT UNSIGNED NOT NULL AUTO_INCREMENT,
	ROLE_ID BIGINT UNSIGNED NOT NULL,
	NICKNAME VARCHAR(60) NOT NULL UNIQUE,
	EMAIL VARCHAR(50) NOT NULL,
	PASSWORD VARCHAR(32) NOT NULL,
	-- 1 stands for male
	-- 0 stands for female
	GENDER BIT NOT NULL COMMENT '1 stands for male
0 stands for female',
	SCORE MEDIUMINT UNSIGNED,
	LEVEL_ID BIGINT UNSIGNED,
	BLOCKED BOOL DEFAULT '0',
	BLOCKEDTILL DATETIME,
	CREATEDAT DATETIME,
	LASTLOGIN DATETIME,
	LASTIP VARCHAR(60),
	-- Store lost password hash
	PASSHASH VARCHAR(32) COMMENT 'Store lost password hash',
	PRIMARY KEY (ID)
);


CREATE TABLE T_USER_VOTING
(
	USER_ID BIGINT UNSIGNED NOT NULL,
	QUESTION_ID BIGINT UNSIGNED NOT NULL
);



/* Create Foreign Keys */

ALTER TABLE T_QUESTION
	ADD FOREIGN KEY (CATEGORY_ID)
	REFERENCES T_CATEGORY (ID)
	ON UPDATE RESTRICT
	ON DELETE RESTRICT
;


ALTER TABLE T_SUBLEVEL
	ADD FOREIGN KEY (LEVEL_ID)
	REFERENCES T_LEVEL (ID)
	ON UPDATE RESTRICT
	ON DELETE RESTRICT
;


ALTER TABLE T_USER
	ADD FOREIGN KEY (LEVEL_ID)
	REFERENCES T_LEVEL (ID)
	ON UPDATE RESTRICT
	ON DELETE RESTRICT
;


ALTER TABLE T_ANSWER
	ADD FOREIGN KEY (QUESTION_ID)
	REFERENCES T_QUESTION (ID)
	ON UPDATE RESTRICT
	ON DELETE RESTRICT
;


ALTER TABLE T_USER_VOTING
	ADD FOREIGN KEY (QUESTION_ID)
	REFERENCES T_QUESTION (ID)
	ON UPDATE RESTRICT
	ON DELETE RESTRICT
;


ALTER TABLE T_USER
	ADD FOREIGN KEY (ROLE_ID)
	REFERENCES T_ROLE (ID)
	ON UPDATE RESTRICT
	ON DELETE RESTRICT
;


ALTER TABLE T_ANSWER
	ADD FOREIGN KEY (USER_ID)
	REFERENCES T_USER (ID)
	ON UPDATE RESTRICT
	ON DELETE RESTRICT
;


ALTER TABLE T_QUESTION
	ADD FOREIGN KEY (USER_ID)
	REFERENCES T_USER (ID)
	ON UPDATE RESTRICT
	ON DELETE RESTRICT
;


ALTER TABLE T_USER_VOTING
	ADD FOREIGN KEY (USER_ID)
	REFERENCES T_USER (ID)
	ON UPDATE RESTRICT
	ON DELETE RESTRICT
;



/* Create Indexes */

CREATE INDEX I_QUESTION_POLL_CREATED USING BTREE ON T_ANSWER (CANDIDATE ASC, CREATEDAT ASC);
CREATE INDEX I_BLOCKED USING BTREE ON T_QUESTION (BLOCKED ASC);
CREATE INDEX I_REWARD ON T_QUESTION (REWARD ASC);
CREATE INDEX I_STATUS ON T_QUESTION (STATUS ASC);
CREATE INDEX I_RECOMMENDED ON T_QUESTION (RECOMMENDED ASC);
CREATE INDEX I_NICKNAME USING BTREE ON T_USER (NICKNAME ASC);
CREATE INDEX I_EMAIL ON T_USER (EMAIL ASC);
CREATE INDEX I_SCORE ON T_USER (SCORE ASC);
CREATE INDEX I_BLOCKED ON T_USER (BLOCKED ASC);
CREATE INDEX I_CREATEDAT ON T_USER (CREATEDAT ASC);
CREATE INDEX I_LASTLOGIN ON T_USER (LASTIP ASC);



